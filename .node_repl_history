"1693810027087".length
"1670608800000".length
new Date().getTime()
a.map((_, index)=> { console.log('index:', index)})
b.map((_, index)=> { console.log('index:', index)})
const b  = Array(3).map((_, index)=> { console.log('index:', index)})
const a  = Array(3).map(()=> 1)
a.map(()=>2)
a.fill(1)
a
a.map(()=> 1)
a
const a  = Array(3).map(()=> 1)
exit
console.log(a['test.a'])
console.log(a['test'])
a
const a = {test : {a: {b: "test val"}}}
d
const [d] = a 
c
const [c] = b
const b = [1,2]
const a = []
a.toFixed(3)
const a = 0.0005
  return amount / q;
  });
    return pv + amount / boundaries.length / b;
  const q = boundaries.reduce((pv, b) => {
function claculateAverage(amount: number, boundaries: number[]) {
3* 1 / totalQ
const totalQ = [1,2,3].reduce((pv,b) => (pv + 1 / b))
[1,2,3].reduce((pv,b) => (pv + b))
new Date().toIsoString()
new Date().toString()
new Date()
new Date().toDate
dates.findIndex(($date) => $date.getTime() === d.getTime()) >= 0
dates.findIndex(($date) => $date.getTime() === d.getTime())
dates.includes(new Date())
dates.includes(d)
dates.push(d)
const d = new Date()
dates
dates.push(new Date())
let dates = []
a!
const a = "adww"
"hello"!
"hello"
new Date()
exit
a
Object.assign(a, {t:"test"})
let a = {amir: "am"}
a
a.replace("a","1")
let a = "amir"
"ali".indexOf("z")
"ali".indexOf("a")
exit
ba
const ba = [... da]
const b = [... da]
const da = "10?01"
const a = "10?01"
const b = [... a]
const a = [... a]
... a
a = 'test'
JSON.stringify(b)
const b = { input: a }
JSON.stringify(a)
a
const a = ["test"]
exit
a.b = 3
let a  = {}
exit
undefined ?? +!!undefined
3 ?? 2
+!!undefined
+undefined
new Date()
exit
Object.entries(a).length
Object.entries(a).length()
Object.entries(a)
!!a
!a
!!a
a
const a = {}
t
a
const t = a()
a()
}
const a = () => {
    },
      error: 3,
      warn: 2,
      info: 1,
      debug: 0,
let a = levels: {
console.error(a)
console.log(a)
a
let a = "asdas"
new Date().getSeconds()
new Date().getMinutes()
new Date().getHours()
new Date().toString()
new Date().getDate()
new Date()
new Date().getTime()
clear
exit()
1 > 3 &  2> 0
1 > 3 &&  2> 0
1 > 3 || 2> 0
b > 3
b
u > 3
u
3
b
5> 1
3 > 5
n
let n = true
int a = true
c = 6
c
const c = 3
b = 231
b
let b = 'asd'
typeof a
clear
a
a = '4fwefe'
a
3 + 5
a
var a = 4